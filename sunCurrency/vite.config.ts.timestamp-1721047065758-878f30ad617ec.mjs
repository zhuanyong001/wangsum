// vite.config.ts
import { defineConfig, loadEnv } from "file:///D:/dev2024/walletApp/admin/sunCurrency/node_modules/.pnpm/vite@5.3.3_@types+node@20.14.10_sass@1.77.8/node_modules/vite/dist/node/index.js";

// build/index.ts
import path from "path";

// build/scripts/generate-svg-type.ts
import fs from "fs/promises";
var svgIconDir = pathResolve("src/assets/svg-icons");
var svgIconTypeFileURL = pathResolve("types/auto-generate/auto-svg-name.d.ts");
var iconDataFile = pathResolve("src/components/SvgIcon/icons.ts");
async function generateSvgIconType(dir, outputFile) {
  try {
    const iconFullNameList = await fs.readdir(dir);
    const iconNameList = iconFullNameList.map((item) => item.replace(".svg", ""));
    const types = iconNameList.reduce((prev, item, index) => prev += iconNameList.length - 1 === index ? `'${item}'` : `'${item}' | `, "");
    await fs.writeFile(outputFile, `type SvgIconName = ${types}`, { flag: "w" });
    await fs.writeFile(iconDataFile, `export default ${JSON.stringify(iconNameList)} as SvgIconName[]`);
  } catch (error) {
    console.log("error: ", error);
  }
}
generateSvgIconType(svgIconDir, svgIconTypeFileURL);

// build/index.ts
function warpperEnv(env_config) {
  const env = {};
  for (const [key, value] of Object.entries(env_config)) {
    if (["true", "false"].includes(value)) {
      env[key] = value === "true" ? true : false;
    } else if (Number(value)) {
      env[key] = Number(value);
    } else {
      env[key] = value;
    }
  }
  return env;
}
function pathResolve(dir) {
  return path.normalize(path.resolve(process.cwd(), dir));
}

// build/plugins/index.ts
import vue from "file:///D:/dev2024/walletApp/admin/sunCurrency/node_modules/.pnpm/@vitejs+plugin-vue@5.0.5_vite@5.3.3_vue@3.4.31/node_modules/@vitejs/plugin-vue/dist/index.mjs";
import vueJsx from "file:///D:/dev2024/walletApp/admin/sunCurrency/node_modules/.pnpm/@vitejs+plugin-vue-jsx@3.1.0_vite@5.3.3_vue@3.4.31/node_modules/@vitejs/plugin-vue-jsx/dist/index.mjs";
import UnoCSS from "file:///D:/dev2024/walletApp/admin/sunCurrency/node_modules/.pnpm/unocss@0.60.3_postcss@8.4.39_vite@5.3.3/node_modules/unocss/dist/vite.mjs";

// build/plugins/auto-import-plugin.ts
import AutoImport from "file:///D:/dev2024/walletApp/admin/sunCurrency/node_modules/.pnpm/unplugin-auto-import@0.17.8/node_modules/unplugin-auto-import/dist/vite.js";
import AutoComponents from "file:///D:/dev2024/walletApp/admin/sunCurrency/node_modules/.pnpm/unplugin-vue-components@0.27.0_vue@3.4.31/node_modules/unplugin-vue-components/dist/vite.js";
import { AntDesignVueResolver } from "file:///D:/dev2024/walletApp/admin/sunCurrency/node_modules/.pnpm/unplugin-vue-components@0.27.0_vue@3.4.31/node_modules/unplugin-vue-components/dist/resolvers.js";
var registerAutoImport = () => {
  return AutoImport({
    imports: ["vue", "pinia", "vue-router"],
    // 自动导入 vue、vue-router、Pinia 相关函数
    dts: "types/auto-generate/auto-import.d.ts",
    dirs: ["src/store/modules", "src/hooks"]
    // 配置其它需要导入的文件目录
  });
};
var registerAutoComponents = () => {
  return AutoComponents({
    resolvers: [AntDesignVueResolver({ importStyle: false })],
    dts: "types/auto-generate/auto-components.d.ts",
    dirs: ["src/components"]
    // 配置其它需要导入的文件目录
  });
};

// build/plugins/compile.html.ts
import dayjs from "file:///D:/dev2024/walletApp/admin/sunCurrency/node_modules/.pnpm/dayjs@1.11.11/node_modules/dayjs/dayjs.min.js";
import { createHtmlPlugin } from "file:///D:/dev2024/walletApp/admin/sunCurrency/node_modules/.pnpm/vite-plugin-html@3.2.2_vite@5.3.3/node_modules/vite-plugin-html/dist/index.mjs";
var registerHtmlPlugin = (viteEnv, isBuild) => {
  const { VITE_APP_TITLE } = viteEnv;
  return createHtmlPlugin({
    // 在这里写 entry 后，你将不需要在 `index.html` 内添加 script 标签，原有标签需要删除
    entry: "src/main.ts",
    // 是否压缩 html
    minify: isBuild,
    // 需要注入 index.html ejs 模版的数据
    inject: {
      data: { VITE_APP_TITLE, buildTime: dayjs().format(`YYYY-MM-DD HH:mm:ss`) }
    }
  });
};

// build/plugins/image.mini.ts
import minipic from "file:///D:/dev2024/walletApp/admin/sunCurrency/node_modules/.pnpm/vite-plugin-imagemin@0.6.1_vite@5.3.3/node_modules/vite-plugin-imagemin/dist/index.mjs";
var registerImageMini = () => {
  return minipic({
    /** 无损压缩配置，无损压缩下图片质量不会变差 */
    optipng: {
      optimizationLevel: 7
    },
    /** 有损压缩配置，有损压缩下图片质量可能会变差 */
    pngquant: {
      quality: [0.8, 0.9],
      // 压缩质量
      speed: 4
      // 压缩速度，范围 0~11
    },
    gifsicle: {
      optimizationLevel: 7,
      interlaced: false
    },
    mozjpeg: {
      quality: 20
      // 压缩质量
    },
    svgo: {
      plugins: [{ name: "removeViewBox" }, { name: "removeEmptyAttrs", active: false }]
    },
    /** 是否禁用 */
    disable: false,
    /** 是否在控制台输出压缩结果 */
    verbose: true
  });
};

// build/plugins/register-svg-icons.ts
import { createSvgIconsPlugin } from "file:///D:/dev2024/walletApp/admin/sunCurrency/node_modules/.pnpm/vite-plugin-svg-icons2@1.0.0_vite@5.3.3/node_modules/vite-plugin-svg-icons2/dist/index.mjs";
function registerSvgIcons() {
  return createSvgIconsPlugin({
    iconDirs: [pathResolve("src/assets/svg-icons")],
    // 指定图标文件夹
    symbolId: "icon-[dir]-[name]"
    // 指定symbolId格式
  });
}

// build/plugins/index.ts
function generateVitePlugins(viteEnv, isBuild) {
  const plugins = [];
  plugins.push(vue({ include: [/\.vue$/] }));
  plugins.push(vueJsx());
  plugins.push(registerSvgIcons());
  plugins.push(UnoCSS());
  plugins.push(registerAutoImport());
  plugins.push(registerAutoComponents());
  plugins.push(registerHtmlPlugin(viteEnv, isBuild));
  if (isBuild) {
    plugins.push(registerImageMini());
  }
  return plugins;
}

// vite.config.ts
var root = process.cwd();
var vite_config_default = defineConfig(({ command, mode }) => {
  const VITE_ENV = warpperEnv(loadEnv(mode, root, "VITE_"));
  const isBuild = command === "build";
  return {
    // 部署应用包时的基本 URL
    base: VITE_ENV.VITE_PUBLIC_PATH,
    plugins: [
      generateVitePlugins(VITE_ENV, isBuild)
      // createSvgIconsPlugin({
      //   // 指定需要缓存的图标文件夹
      //   iconDirs: [path.resolve(process.cwd(), 'src/assets/icons')],
      //   // 指定symbolId格式
      //   symbolId: 'icon-[dir]-[name]'
      // })
    ],
    // 安装：style-resources-loader
    // pluginOptions: {
    //   'style-resources-loader': {
    //     preProcessor: 'scss',
    //     // 这三种 patterns 写法都是可以的
    //     // patterns: ["./src/assets/reset1.less", "./src/assets/reset2.less"]
    //     // patterns: "./src/assets/reset.less"
    //     patterns: [
    //       // 两种路径写法都可以，这里的路径不能使用 @ 符号，否则会报错
    //       // path.resolve(__dirname, './src/assets/reset.less')
    //       path.resolve(__dirname, 'src/styles/variables.scss')
    //     ]
    //   }
    // },
    resolve: {
      alias: [
        /** 设置 `@` 指向 `src` 目录 */
        { find: "@", replacement: pathResolve("./src") },
        /** 设置 `#` 指向 `types` 目录 */
        { find: "#", replacement: pathResolve("./types") }
      ]
    },
    server: {
      /** 设置为 0.0.0.0 或者 true 将监听所有地址，包括局域网和公网地址 */
      host: true,
      cors: true
      /** 反向代理配置（主要是开发时用来解决跨域问题） */
      // proxy: {
      //   // [process.env.VITE_BASE_API]: process.env.VITE_BASE_URL,
      //   '/api': {
      //     target: process.env.VITE_BASE_URL,
      //     changeOrigin: true,
      //     rewrite: (path) => path.replace(/\/api/, '/api'),
      //     bypass(req, res, options) {
      //       // const proxyURL = options.target + options.rewrite(req.url);
      //       // res.setHeader('x-req-proxyURL', proxyURL) // 将真实请求地址设置到响应头中
      //     }
      //   }
      //   // '/api': {
      //   //   target: process.env.VITE_BASE_URL,
      //   //   changeOrigin: true,
      //   // }
      // }
    },
    css: {
      /** 通过多线程运行 CSS 预处理器，从而极大提高其处理速度 */
      preprocessorOptions: {
        scss: {
          additionalData: `
            @use "./src/styles/common.scss" as *;
            @use "./src/styles/variables.scss" as *;
          `
        }
      }
    },
    build: {
      /** 指定打包文件的输出目录。默认值为 dist ，当 dist 被占用或公司有统一命名规范时，可进行调整 */
      outDir: VITE_ENV.VITE_OUTPUT_DIR,
      /** 图片转 base64 编码的阈值。为防止过多的 http 请求，Vite 会将小于此阈值的图片转为 base64 格式 */
      assetsInlineLimit: 4096,
      /** 规定触发警告的 chunk 大小。（以 kbs 为单位） */
      chunkSizeWarningLimit: 500,
      /** 启用/禁用 CSS 代码拆分 */
      cssCodeSplit: true,
      /** 构建后是否生成 source map 文件 */
      sourcemap: false,
      /** 是否在构建阶段将 publicDir 目录中的所有文件复制到 outDir 目录中 */
      copyPublicDir: true,
      /** 指定使用哪种混淆器。默认为 esbuild，它比 terser 快 20-40 倍，压缩率只差 1%-2% */
      minify: "esbuild",
      rollupOptions: {
        output: {
          // 引入文件名的名称
          chunkFileNames: "js/[name]-[hash].js",
          // 包的入口文件名称
          entryFileNames: "js/[name]-[hash].js",
          // 对打包出来的资源文件进行分类，分别放到不同的文件夹内
          assetFileNames(chunkInfo) {
            if (chunkInfo.name.endsWith(".css")) {
              return "css/[name]-[hash].css";
            }
            const fontExtList = [".ttf", ".otf", ".woff", ".woff2", ".eot"];
            if (fontExtList.some((ext) => chunkInfo.name.endsWith(ext))) {
              return "font/[name]-[hash].[ext]";
            }
            const imgExtList = ["png", "jpg", ".jpeg", "gif", "webp"];
            if (imgExtList.some((ext) => chunkInfo.name.endsWith(ext))) {
              return `img/[name]-[hash].[ext]`;
            }
            const videoExtList = [".mp4", ".avi", ".wmv", ".ram", ".mpg", "mpeg", ".m3u8"];
            if (videoExtList.some((ext) => chunkInfo.name.endsWith(ext))) {
              return `video/[name]-[hash].[ext]`;
            }
            return "assets/[name]-[hash].[ext]";
          },
          // 打包的文件进行拆包处理
          manualChunks(chunk) {
            if (chunk.includes("node_modules")) return "vendor";
          }
        }
      }
    },
    /** 打包后移除所有的 console、debugger */
    esbuild: {
      drop: VITE_ENV.VITE_DROP_CONSOLE ? ["console", "debugger"] : []
    }
  };
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
